
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview AI agent that refines an email reply draft.
 *
 * - improveReplyDraft - A function that refines an email reply draft.
 * - ImproveReplyDraftInput - The input type for the improveReplyDraft function.
 * - ImproveReplyDraftOutput - The return type for the improveReplyDraft function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ImproveReplyDraftInputSchema = z.object({
  draft: z
    .string()
    .describe('The email reply draft to be refined.'),
  selectedModel: z.string().optional().describe('The AI model to use for refinement.'),
});
export type ImproveReplyDraftInput = z.infer<typeof ImproveReplyDraftInputSchema>;

const ImproveReplyDraftOutputSchema = z.object({
  refinedDraft: z.string().describe('The refined email reply draft.'),
});
export type ImproveReplyDraftOutput = z.infer<typeof ImproveReplyDraftOutputSchema>;

export async function improveReplyDraft(input: ImproveReplyDraftInput): Promise<ImproveReplyDraftOutput> {
  return improveReplyDraftFlow(input);
}

const prompt = ai.definePrompt({
  name: 'improveReplyDraftPrompt',
  input: {schema: ImproveReplyDraftInputSchema.omit({ selectedModel: true })}, // Omit selectedModel for prompt's direct input
  output: {schema: ImproveReplyDraftOutputSchema},
  prompt: `You are an AI assistant specialized in refining email drafts.
      Your task is to improve the provided draft in terms of tone, grammar, and overall professionalism.
      Make sure the refined draft maintains the original intent while making it more polished and effective.

      Draft: {{{draft}}}

      Refined Draft:`,
});

const MAX_RETRIES = 3;
const RETRY_DELAY_MS = 2000; // 2 seconds

const improveReplyDraftFlow = ai.defineFlow(
  {
    name: 'improveReplyDraftFlow',
    inputSchema: ImproveReplyDraftInputSchema,
    outputSchema: ImproveReplyDraftOutputSchema,
  },
  async (flowInput) => {
    const promptPayload = { draft: flowInput.draft };
    const promptOptions = flowInput.selectedModel ? { model: flowInput.selectedModel } : {};

    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
      try {
        const {output} = await prompt(promptPayload, promptOptions);
        return output!; // Success
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        if ((errorMessage.includes('503') || errorMessage.toLowerCase().includes('overload') || errorMessage.toLowerCase().includes('service unavailable')) && attempt < MAX_RETRIES) {
          console.warn(`Attempt ${attempt} failed for improveReplyDraftFlow: ${errorMessage}. Retrying in ${RETRY_DELAY_MS / 1000}s...`);
          await new Promise(resolve => setTimeout(resolve, RETRY_DELAY_MS));
        } else {
          console.error(`Final attempt (${attempt}) failed for improveReplyDraftFlow or non-retryable error: ${errorMessage}`);
          throw error;
        }
      }
    }
    // This line should ideally not be reached if MAX_RETRIES > 0, but acts as a fallback.
    throw new Error('Failed to improve reply draft after multiple retries.');
  }
);
